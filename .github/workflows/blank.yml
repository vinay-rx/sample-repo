# This is a basic workflow to help you get started with Actions
 
name: CI
 
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
 
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
 
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project
          
      - name: Get access token
        id: get_access_token
        run: |
          accessTokenPayload=$(curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"${{ secrets.PORT_CLIENT_ID }}\", \"clientSecret\": \"${{ secrets.PORT_CLIENT_SECRET }}\"}" \
            -s "https://api.getport.io/v1/auth/access_token")
          echo "accessTokenPayload=$accessTokenPayload" >> $GITHUB_ENV
          ACCESS_TOKEN=$(echo $accessTokenPayload | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Send logs example
        run: |
          logs_report_response=$(curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{"message": "this is a log test message example"}' \
            "https://api.getport.io/v1/actions/runs/${{ github.event.inputs.run_id }}/logs")
          echo $logs_report_response

      - name: Update status example
        run: |
          status_report_response=$(curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{"status":"SUCCESS", "message": {"run_status": "GitHub Actions CI/CD Run completed successfully!"}}' \
            "https://api.getport.io/v1/actions/runs/${{ github.event.inputs.run_id }}")
          echo $status_report_response
